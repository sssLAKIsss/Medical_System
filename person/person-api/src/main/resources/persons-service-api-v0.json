{
  "openapi": "3.0.1",
  "info": {
    "title": "person-service",
    "description": "Справочник клиентов",
    "contact": {
      "name": "Я",
      "email": "я@я.я"
    },
    "license": {
      "name": "Лицензировано мной"
    },
    "version": "person-service-1.0"
  },
  "servers": [
    {
      "url": "http://localhost:8081",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "Contact API",
      "description": "Позволяет получить, создавать и обновлять доукмент/список документов"
    },
    {
      "name": "Document API",
      "description": "Позволяет получить, создавать и обновлять доукмент/список документов"
    },
    {
      "name": "Person API",
      "description": "Позволяет получить, создавать и обновлять пользователя/список пользователей"
    },
    {
      "name": "Address API",
      "description": "Позволяет получить, создавать и обновлять адреса пользователя/список адресов"
    }
  ],
  "paths": {
    "/api/v1/persons": {
      "get": {
        "tags": [
          "Person API"
        ],
        "summary": "Получить список пользователей",
        "description": "Позволяет получить список пользователей с возможностью сортировки,по умолчанию сортировка по ФИО",
        "operationId": "findAllPersons",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "lastName"
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filterParameter",
            "in": "query",
            "description": "Имя региона, по которому будет сделана фильтрация",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Person API"
        ],
        "summary": "Обновить данные пользователя",
        "description": "Позволяет обновить данные пользователя на основе PersonDto",
        "operationId": "updatePerson",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Person API"
        ],
        "summary": "Создать пользователя",
        "description": "Позволяет создать пользователя на основе PersonCreateInputDto",
        "operationId": "savePerson",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonCreateInputDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "Person API"
        ],
        "summary": "Удалить всех пользователей",
        "description": "Удаляет всех пользотвалетей из базы",
        "operationId": "deleteAllById",
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "100 CONTINUE",
                      "101 SWITCHING_PROTOCOLS",
                      "102 PROCESSING",
                      "103 CHECKPOINT",
                      "200 OK",
                      "201 CREATED",
                      "202 ACCEPTED",
                      "203 NON_AUTHORITATIVE_INFORMATION",
                      "204 NO_CONTENT",
                      "205 RESET_CONTENT",
                      "206 PARTIAL_CONTENT",
                      "207 MULTI_STATUS",
                      "208 ALREADY_REPORTED",
                      "226 IM_USED",
                      "300 MULTIPLE_CHOICES",
                      "301 MOVED_PERMANENTLY",
                      "302 FOUND",
                      "302 MOVED_TEMPORARILY",
                      "303 SEE_OTHER",
                      "304 NOT_MODIFIED",
                      "305 USE_PROXY",
                      "307 TEMPORARY_REDIRECT",
                      "308 PERMANENT_REDIRECT",
                      "400 BAD_REQUEST",
                      "401 UNAUTHORIZED",
                      "402 PAYMENT_REQUIRED",
                      "403 FORBIDDEN",
                      "404 NOT_FOUND",
                      "405 METHOD_NOT_ALLOWED",
                      "406 NOT_ACCEPTABLE",
                      "407 PROXY_AUTHENTICATION_REQUIRED",
                      "408 REQUEST_TIMEOUT",
                      "409 CONFLICT",
                      "410 GONE",
                      "411 LENGTH_REQUIRED",
                      "412 PRECONDITION_FAILED",
                      "413 PAYLOAD_TOO_LARGE",
                      "413 REQUEST_ENTITY_TOO_LARGE",
                      "414 URI_TOO_LONG",
                      "414 REQUEST_URI_TOO_LONG",
                      "415 UNSUPPORTED_MEDIA_TYPE",
                      "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                      "417 EXPECTATION_FAILED",
                      "418 I_AM_A_TEAPOT",
                      "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                      "420 METHOD_FAILURE",
                      "421 DESTINATION_LOCKED",
                      "422 UNPROCESSABLE_ENTITY",
                      "423 LOCKED",
                      "424 FAILED_DEPENDENCY",
                      "425 TOO_EARLY",
                      "426 UPGRADE_REQUIRED",
                      "428 PRECONDITION_REQUIRED",
                      "429 TOO_MANY_REQUESTS",
                      "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                      "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                      "500 INTERNAL_SERVER_ERROR",
                      "501 NOT_IMPLEMENTED",
                      "502 BAD_GATEWAY",
                      "503 SERVICE_UNAVAILABLE",
                      "504 GATEWAY_TIMEOUT",
                      "505 HTTP_VERSION_NOT_SUPPORTED",
                      "506 VARIANT_ALSO_NEGOTIATES",
                      "507 INSUFFICIENT_STORAGE",
                      "508 LOOP_DETECTED",
                      "509 BANDWIDTH_LIMIT_EXCEEDED",
                      "510 NOT_EXTENDED",
                      "511 NETWORK_AUTHENTICATION_REQUIRED"
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/persons/visibility": {
      "put": {
        "tags": [
          "Person API"
        ],
        "summary": "Установить видимость всем пользователям в базе",
        "description": "Позволяет установить всем пользователям и их документам, контактам и адресам(если адрес только за определенным пользователем)",
        "operationId": "setVisibilityToPersons",
        "parameters": [
          {
            "name": "visibility",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "personsId",
            "in": "query",
            "required": true,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "100 CONTINUE",
                      "101 SWITCHING_PROTOCOLS",
                      "102 PROCESSING",
                      "103 CHECKPOINT",
                      "200 OK",
                      "201 CREATED",
                      "202 ACCEPTED",
                      "203 NON_AUTHORITATIVE_INFORMATION",
                      "204 NO_CONTENT",
                      "205 RESET_CONTENT",
                      "206 PARTIAL_CONTENT",
                      "207 MULTI_STATUS",
                      "208 ALREADY_REPORTED",
                      "226 IM_USED",
                      "300 MULTIPLE_CHOICES",
                      "301 MOVED_PERMANENTLY",
                      "302 FOUND",
                      "302 MOVED_TEMPORARILY",
                      "303 SEE_OTHER",
                      "304 NOT_MODIFIED",
                      "305 USE_PROXY",
                      "307 TEMPORARY_REDIRECT",
                      "308 PERMANENT_REDIRECT",
                      "400 BAD_REQUEST",
                      "401 UNAUTHORIZED",
                      "402 PAYMENT_REQUIRED",
                      "403 FORBIDDEN",
                      "404 NOT_FOUND",
                      "405 METHOD_NOT_ALLOWED",
                      "406 NOT_ACCEPTABLE",
                      "407 PROXY_AUTHENTICATION_REQUIRED",
                      "408 REQUEST_TIMEOUT",
                      "409 CONFLICT",
                      "410 GONE",
                      "411 LENGTH_REQUIRED",
                      "412 PRECONDITION_FAILED",
                      "413 PAYLOAD_TOO_LARGE",
                      "413 REQUEST_ENTITY_TOO_LARGE",
                      "414 URI_TOO_LONG",
                      "414 REQUEST_URI_TOO_LONG",
                      "415 UNSUPPORTED_MEDIA_TYPE",
                      "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                      "417 EXPECTATION_FAILED",
                      "418 I_AM_A_TEAPOT",
                      "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                      "420 METHOD_FAILURE",
                      "421 DESTINATION_LOCKED",
                      "422 UNPROCESSABLE_ENTITY",
                      "423 LOCKED",
                      "424 FAILED_DEPENDENCY",
                      "425 TOO_EARLY",
                      "426 UPGRADE_REQUIRED",
                      "428 PRECONDITION_REQUIRED",
                      "429 TOO_MANY_REQUESTS",
                      "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                      "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                      "500 INTERNAL_SERVER_ERROR",
                      "501 NOT_IMPLEMENTED",
                      "502 BAD_GATEWAY",
                      "503 SERVICE_UNAVAILABLE",
                      "504 GATEWAY_TIMEOUT",
                      "505 HTTP_VERSION_NOT_SUPPORTED",
                      "506 VARIANT_ALSO_NEGOTIATES",
                      "507 INSUFFICIENT_STORAGE",
                      "508 LOOP_DETECTED",
                      "509 BANDWIDTH_LIMIT_EXCEEDED",
                      "510 NOT_EXTENDED",
                      "511 NETWORK_AUTHENTICATION_REQUIRED"
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/persons/updateAll": {
      "put": {
        "tags": [
          "Person API"
        ],
        "summary": "Обновить данные списка пользователей",
        "description": "Позволяет обновить данные списка пользователей на основе PersonDto",
        "operationId": "updateAllPersons",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/documents": {
      "get": {
        "tags": [
          "Document API"
        ],
        "summary": "Получить список документов",
        "description": "Позволяет получить список документов",
        "operationId": "findAllDocuments",
        "parameters": [
          {
            "name": "visibility",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Document API"
        ],
        "summary": "Обновить список документов",
        "description": "Позволяет обнвоить входной список документов",
        "operationId": "updateDocuments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Document API"
        ],
        "summary": "Добавить список документов в базу",
        "description": "Позволяет сохранить список документов",
        "operationId": "createDocuments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DocumentCreateInputDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Document API"
        ],
        "summary": "Удалить все документов",
        "description": "Позволяет удалить все документы из базы",
        "operationId": "deleteAllDocuments",
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "100 CONTINUE",
                      "101 SWITCHING_PROTOCOLS",
                      "102 PROCESSING",
                      "103 CHECKPOINT",
                      "200 OK",
                      "201 CREATED",
                      "202 ACCEPTED",
                      "203 NON_AUTHORITATIVE_INFORMATION",
                      "204 NO_CONTENT",
                      "205 RESET_CONTENT",
                      "206 PARTIAL_CONTENT",
                      "207 MULTI_STATUS",
                      "208 ALREADY_REPORTED",
                      "226 IM_USED",
                      "300 MULTIPLE_CHOICES",
                      "301 MOVED_PERMANENTLY",
                      "302 FOUND",
                      "302 MOVED_TEMPORARILY",
                      "303 SEE_OTHER",
                      "304 NOT_MODIFIED",
                      "305 USE_PROXY",
                      "307 TEMPORARY_REDIRECT",
                      "308 PERMANENT_REDIRECT",
                      "400 BAD_REQUEST",
                      "401 UNAUTHORIZED",
                      "402 PAYMENT_REQUIRED",
                      "403 FORBIDDEN",
                      "404 NOT_FOUND",
                      "405 METHOD_NOT_ALLOWED",
                      "406 NOT_ACCEPTABLE",
                      "407 PROXY_AUTHENTICATION_REQUIRED",
                      "408 REQUEST_TIMEOUT",
                      "409 CONFLICT",
                      "410 GONE",
                      "411 LENGTH_REQUIRED",
                      "412 PRECONDITION_FAILED",
                      "413 PAYLOAD_TOO_LARGE",
                      "413 REQUEST_ENTITY_TOO_LARGE",
                      "414 URI_TOO_LONG",
                      "414 REQUEST_URI_TOO_LONG",
                      "415 UNSUPPORTED_MEDIA_TYPE",
                      "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                      "417 EXPECTATION_FAILED",
                      "418 I_AM_A_TEAPOT",
                      "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                      "420 METHOD_FAILURE",
                      "421 DESTINATION_LOCKED",
                      "422 UNPROCESSABLE_ENTITY",
                      "423 LOCKED",
                      "424 FAILED_DEPENDENCY",
                      "425 TOO_EARLY",
                      "426 UPGRADE_REQUIRED",
                      "428 PRECONDITION_REQUIRED",
                      "429 TOO_MANY_REQUESTS",
                      "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                      "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                      "500 INTERNAL_SERVER_ERROR",
                      "501 NOT_IMPLEMENTED",
                      "502 BAD_GATEWAY",
                      "503 SERVICE_UNAVAILABLE",
                      "504 GATEWAY_TIMEOUT",
                      "505 HTTP_VERSION_NOT_SUPPORTED",
                      "506 VARIANT_ALSO_NEGOTIATES",
                      "507 INSUFFICIENT_STORAGE",
                      "508 LOOP_DETECTED",
                      "509 BANDWIDTH_LIMIT_EXCEEDED",
                      "510 NOT_EXTENDED",
                      "511 NETWORK_AUTHENTICATION_REQUIRED"
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/documents/visibility": {
      "put": {
        "tags": [
          "Document API"
        ],
        "summary": "Выставить уровень видимости документам",
        "description": "Позволяет установить нужный уровень видимости документов по их id",
        "operationId": "setVisibilityByDocuments",
        "parameters": [
          {
            "name": "documentsId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "100 CONTINUE",
                      "101 SWITCHING_PROTOCOLS",
                      "102 PROCESSING",
                      "103 CHECKPOINT",
                      "200 OK",
                      "201 CREATED",
                      "202 ACCEPTED",
                      "203 NON_AUTHORITATIVE_INFORMATION",
                      "204 NO_CONTENT",
                      "205 RESET_CONTENT",
                      "206 PARTIAL_CONTENT",
                      "207 MULTI_STATUS",
                      "208 ALREADY_REPORTED",
                      "226 IM_USED",
                      "300 MULTIPLE_CHOICES",
                      "301 MOVED_PERMANENTLY",
                      "302 FOUND",
                      "302 MOVED_TEMPORARILY",
                      "303 SEE_OTHER",
                      "304 NOT_MODIFIED",
                      "305 USE_PROXY",
                      "307 TEMPORARY_REDIRECT",
                      "308 PERMANENT_REDIRECT",
                      "400 BAD_REQUEST",
                      "401 UNAUTHORIZED",
                      "402 PAYMENT_REQUIRED",
                      "403 FORBIDDEN",
                      "404 NOT_FOUND",
                      "405 METHOD_NOT_ALLOWED",
                      "406 NOT_ACCEPTABLE",
                      "407 PROXY_AUTHENTICATION_REQUIRED",
                      "408 REQUEST_TIMEOUT",
                      "409 CONFLICT",
                      "410 GONE",
                      "411 LENGTH_REQUIRED",
                      "412 PRECONDITION_FAILED",
                      "413 PAYLOAD_TOO_LARGE",
                      "413 REQUEST_ENTITY_TOO_LARGE",
                      "414 URI_TOO_LONG",
                      "414 REQUEST_URI_TOO_LONG",
                      "415 UNSUPPORTED_MEDIA_TYPE",
                      "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                      "417 EXPECTATION_FAILED",
                      "418 I_AM_A_TEAPOT",
                      "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                      "420 METHOD_FAILURE",
                      "421 DESTINATION_LOCKED",
                      "422 UNPROCESSABLE_ENTITY",
                      "423 LOCKED",
                      "424 FAILED_DEPENDENCY",
                      "425 TOO_EARLY",
                      "426 UPGRADE_REQUIRED",
                      "428 PRECONDITION_REQUIRED",
                      "429 TOO_MANY_REQUESTS",
                      "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                      "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                      "500 INTERNAL_SERVER_ERROR",
                      "501 NOT_IMPLEMENTED",
                      "502 BAD_GATEWAY",
                      "503 SERVICE_UNAVAILABLE",
                      "504 GATEWAY_TIMEOUT",
                      "505 HTTP_VERSION_NOT_SUPPORTED",
                      "506 VARIANT_ALSO_NEGOTIATES",
                      "507 INSUFFICIENT_STORAGE",
                      "508 LOOP_DETECTED",
                      "509 BANDWIDTH_LIMIT_EXCEEDED",
                      "510 NOT_EXTENDED",
                      "511 NETWORK_AUTHENTICATION_REQUIRED"
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contacts": {
      "get": {
        "tags": [
          "Contact API"
        ],
        "summary": "Получить список контактов",
        "description": "Позволяет получить список контактов",
        "operationId": "findAllContacts",
        "parameters": [
          {
            "name": "visibility",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contact API"
        ],
        "summary": "Обновить список контактов",
        "description": "Позволяет обновить входной список контактов",
        "operationId": "updateContacts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contact API"
        ],
        "summary": "Добавить список контактов в базу",
        "description": "Позволяет сохранить список контактов",
        "operationId": "createContacts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactCreateInputDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contact API"
        ],
        "summary": "Удалить все контакты",
        "description": "Позволяет удалить все контакты из базы",
        "operationId": "deleteAllContacts",
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "100 CONTINUE",
                      "101 SWITCHING_PROTOCOLS",
                      "102 PROCESSING",
                      "103 CHECKPOINT",
                      "200 OK",
                      "201 CREATED",
                      "202 ACCEPTED",
                      "203 NON_AUTHORITATIVE_INFORMATION",
                      "204 NO_CONTENT",
                      "205 RESET_CONTENT",
                      "206 PARTIAL_CONTENT",
                      "207 MULTI_STATUS",
                      "208 ALREADY_REPORTED",
                      "226 IM_USED",
                      "300 MULTIPLE_CHOICES",
                      "301 MOVED_PERMANENTLY",
                      "302 FOUND",
                      "302 MOVED_TEMPORARILY",
                      "303 SEE_OTHER",
                      "304 NOT_MODIFIED",
                      "305 USE_PROXY",
                      "307 TEMPORARY_REDIRECT",
                      "308 PERMANENT_REDIRECT",
                      "400 BAD_REQUEST",
                      "401 UNAUTHORIZED",
                      "402 PAYMENT_REQUIRED",
                      "403 FORBIDDEN",
                      "404 NOT_FOUND",
                      "405 METHOD_NOT_ALLOWED",
                      "406 NOT_ACCEPTABLE",
                      "407 PROXY_AUTHENTICATION_REQUIRED",
                      "408 REQUEST_TIMEOUT",
                      "409 CONFLICT",
                      "410 GONE",
                      "411 LENGTH_REQUIRED",
                      "412 PRECONDITION_FAILED",
                      "413 PAYLOAD_TOO_LARGE",
                      "413 REQUEST_ENTITY_TOO_LARGE",
                      "414 URI_TOO_LONG",
                      "414 REQUEST_URI_TOO_LONG",
                      "415 UNSUPPORTED_MEDIA_TYPE",
                      "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                      "417 EXPECTATION_FAILED",
                      "418 I_AM_A_TEAPOT",
                      "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                      "420 METHOD_FAILURE",
                      "421 DESTINATION_LOCKED",
                      "422 UNPROCESSABLE_ENTITY",
                      "423 LOCKED",
                      "424 FAILED_DEPENDENCY",
                      "425 TOO_EARLY",
                      "426 UPGRADE_REQUIRED",
                      "428 PRECONDITION_REQUIRED",
                      "429 TOO_MANY_REQUESTS",
                      "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                      "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                      "500 INTERNAL_SERVER_ERROR",
                      "501 NOT_IMPLEMENTED",
                      "502 BAD_GATEWAY",
                      "503 SERVICE_UNAVAILABLE",
                      "504 GATEWAY_TIMEOUT",
                      "505 HTTP_VERSION_NOT_SUPPORTED",
                      "506 VARIANT_ALSO_NEGOTIATES",
                      "507 INSUFFICIENT_STORAGE",
                      "508 LOOP_DETECTED",
                      "509 BANDWIDTH_LIMIT_EXCEEDED",
                      "510 NOT_EXTENDED",
                      "511 NETWORK_AUTHENTICATION_REQUIRED"
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contacts/visibility": {
      "put": {
        "tags": [
          "Contact API"
        ],
        "summary": "Выставить уровень видимости контактам",
        "description": "Позволяет установить нужный уровень видимости контактов по их id",
        "operationId": "setVisibilityByContacts",
        "parameters": [
          {
            "name": "contactsId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "100 CONTINUE",
                      "101 SWITCHING_PROTOCOLS",
                      "102 PROCESSING",
                      "103 CHECKPOINT",
                      "200 OK",
                      "201 CREATED",
                      "202 ACCEPTED",
                      "203 NON_AUTHORITATIVE_INFORMATION",
                      "204 NO_CONTENT",
                      "205 RESET_CONTENT",
                      "206 PARTIAL_CONTENT",
                      "207 MULTI_STATUS",
                      "208 ALREADY_REPORTED",
                      "226 IM_USED",
                      "300 MULTIPLE_CHOICES",
                      "301 MOVED_PERMANENTLY",
                      "302 FOUND",
                      "302 MOVED_TEMPORARILY",
                      "303 SEE_OTHER",
                      "304 NOT_MODIFIED",
                      "305 USE_PROXY",
                      "307 TEMPORARY_REDIRECT",
                      "308 PERMANENT_REDIRECT",
                      "400 BAD_REQUEST",
                      "401 UNAUTHORIZED",
                      "402 PAYMENT_REQUIRED",
                      "403 FORBIDDEN",
                      "404 NOT_FOUND",
                      "405 METHOD_NOT_ALLOWED",
                      "406 NOT_ACCEPTABLE",
                      "407 PROXY_AUTHENTICATION_REQUIRED",
                      "408 REQUEST_TIMEOUT",
                      "409 CONFLICT",
                      "410 GONE",
                      "411 LENGTH_REQUIRED",
                      "412 PRECONDITION_FAILED",
                      "413 PAYLOAD_TOO_LARGE",
                      "413 REQUEST_ENTITY_TOO_LARGE",
                      "414 URI_TOO_LONG",
                      "414 REQUEST_URI_TOO_LONG",
                      "415 UNSUPPORTED_MEDIA_TYPE",
                      "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                      "417 EXPECTATION_FAILED",
                      "418 I_AM_A_TEAPOT",
                      "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                      "420 METHOD_FAILURE",
                      "421 DESTINATION_LOCKED",
                      "422 UNPROCESSABLE_ENTITY",
                      "423 LOCKED",
                      "424 FAILED_DEPENDENCY",
                      "425 TOO_EARLY",
                      "426 UPGRADE_REQUIRED",
                      "428 PRECONDITION_REQUIRED",
                      "429 TOO_MANY_REQUESTS",
                      "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                      "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                      "500 INTERNAL_SERVER_ERROR",
                      "501 NOT_IMPLEMENTED",
                      "502 BAD_GATEWAY",
                      "503 SERVICE_UNAVAILABLE",
                      "504 GATEWAY_TIMEOUT",
                      "505 HTTP_VERSION_NOT_SUPPORTED",
                      "506 VARIANT_ALSO_NEGOTIATES",
                      "507 INSUFFICIENT_STORAGE",
                      "508 LOOP_DETECTED",
                      "509 BANDWIDTH_LIMIT_EXCEEDED",
                      "510 NOT_EXTENDED",
                      "511 NETWORK_AUTHENTICATION_REQUIRED"
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/addresses": {
      "get": {
        "tags": [
          "Address API"
        ],
        "summary": "Получить все адреса",
        "description": "Позволяет получить все адреса в зависимости от указанного уровня видимости",
        "operationId": "findAllAddresses",
        "parameters": [
          {
            "name": "visibility",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AddressDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Address API"
        ],
        "summary": "Обновить список адресов в базе",
        "description": "Позволяет обновить список адресов в базе",
        "operationId": "updateAddresses",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddressDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Address API"
        ],
        "summary": "Добавить список адресов в базу",
        "description": "Позволяет сохранить список адресов в базу",
        "operationId": "saveAddresses",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddressCreateInputDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Address API"
        ],
        "summary": "Удалить все адреса",
        "description": "Позволяет удалить все документы из базы",
        "operationId": "deleteAllDocuments_1",
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "100 CONTINUE",
                      "101 SWITCHING_PROTOCOLS",
                      "102 PROCESSING",
                      "103 CHECKPOINT",
                      "200 OK",
                      "201 CREATED",
                      "202 ACCEPTED",
                      "203 NON_AUTHORITATIVE_INFORMATION",
                      "204 NO_CONTENT",
                      "205 RESET_CONTENT",
                      "206 PARTIAL_CONTENT",
                      "207 MULTI_STATUS",
                      "208 ALREADY_REPORTED",
                      "226 IM_USED",
                      "300 MULTIPLE_CHOICES",
                      "301 MOVED_PERMANENTLY",
                      "302 FOUND",
                      "302 MOVED_TEMPORARILY",
                      "303 SEE_OTHER",
                      "304 NOT_MODIFIED",
                      "305 USE_PROXY",
                      "307 TEMPORARY_REDIRECT",
                      "308 PERMANENT_REDIRECT",
                      "400 BAD_REQUEST",
                      "401 UNAUTHORIZED",
                      "402 PAYMENT_REQUIRED",
                      "403 FORBIDDEN",
                      "404 NOT_FOUND",
                      "405 METHOD_NOT_ALLOWED",
                      "406 NOT_ACCEPTABLE",
                      "407 PROXY_AUTHENTICATION_REQUIRED",
                      "408 REQUEST_TIMEOUT",
                      "409 CONFLICT",
                      "410 GONE",
                      "411 LENGTH_REQUIRED",
                      "412 PRECONDITION_FAILED",
                      "413 PAYLOAD_TOO_LARGE",
                      "413 REQUEST_ENTITY_TOO_LARGE",
                      "414 URI_TOO_LONG",
                      "414 REQUEST_URI_TOO_LONG",
                      "415 UNSUPPORTED_MEDIA_TYPE",
                      "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                      "417 EXPECTATION_FAILED",
                      "418 I_AM_A_TEAPOT",
                      "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                      "420 METHOD_FAILURE",
                      "421 DESTINATION_LOCKED",
                      "422 UNPROCESSABLE_ENTITY",
                      "423 LOCKED",
                      "424 FAILED_DEPENDENCY",
                      "425 TOO_EARLY",
                      "426 UPGRADE_REQUIRED",
                      "428 PRECONDITION_REQUIRED",
                      "429 TOO_MANY_REQUESTS",
                      "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                      "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                      "500 INTERNAL_SERVER_ERROR",
                      "501 NOT_IMPLEMENTED",
                      "502 BAD_GATEWAY",
                      "503 SERVICE_UNAVAILABLE",
                      "504 GATEWAY_TIMEOUT",
                      "505 HTTP_VERSION_NOT_SUPPORTED",
                      "506 VARIANT_ALSO_NEGOTIATES",
                      "507 INSUFFICIENT_STORAGE",
                      "508 LOOP_DETECTED",
                      "509 BANDWIDTH_LIMIT_EXCEEDED",
                      "510 NOT_EXTENDED",
                      "511 NETWORK_AUTHENTICATION_REQUIRED"
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/addresses/visibility": {
      "put": {
        "tags": [
          "Address API"
        ],
        "summary": "Обновить список адресов в базе",
        "description": "Позволяет обновить список адресов в базе",
        "operationId": "setVisibilityToAddresses",
        "parameters": [
          {
            "name": "addresses",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "100 CONTINUE",
                      "101 SWITCHING_PROTOCOLS",
                      "102 PROCESSING",
                      "103 CHECKPOINT",
                      "200 OK",
                      "201 CREATED",
                      "202 ACCEPTED",
                      "203 NON_AUTHORITATIVE_INFORMATION",
                      "204 NO_CONTENT",
                      "205 RESET_CONTENT",
                      "206 PARTIAL_CONTENT",
                      "207 MULTI_STATUS",
                      "208 ALREADY_REPORTED",
                      "226 IM_USED",
                      "300 MULTIPLE_CHOICES",
                      "301 MOVED_PERMANENTLY",
                      "302 FOUND",
                      "302 MOVED_TEMPORARILY",
                      "303 SEE_OTHER",
                      "304 NOT_MODIFIED",
                      "305 USE_PROXY",
                      "307 TEMPORARY_REDIRECT",
                      "308 PERMANENT_REDIRECT",
                      "400 BAD_REQUEST",
                      "401 UNAUTHORIZED",
                      "402 PAYMENT_REQUIRED",
                      "403 FORBIDDEN",
                      "404 NOT_FOUND",
                      "405 METHOD_NOT_ALLOWED",
                      "406 NOT_ACCEPTABLE",
                      "407 PROXY_AUTHENTICATION_REQUIRED",
                      "408 REQUEST_TIMEOUT",
                      "409 CONFLICT",
                      "410 GONE",
                      "411 LENGTH_REQUIRED",
                      "412 PRECONDITION_FAILED",
                      "413 PAYLOAD_TOO_LARGE",
                      "413 REQUEST_ENTITY_TOO_LARGE",
                      "414 URI_TOO_LONG",
                      "414 REQUEST_URI_TOO_LONG",
                      "415 UNSUPPORTED_MEDIA_TYPE",
                      "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                      "417 EXPECTATION_FAILED",
                      "418 I_AM_A_TEAPOT",
                      "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                      "420 METHOD_FAILURE",
                      "421 DESTINATION_LOCKED",
                      "422 UNPROCESSABLE_ENTITY",
                      "423 LOCKED",
                      "424 FAILED_DEPENDENCY",
                      "425 TOO_EARLY",
                      "426 UPGRADE_REQUIRED",
                      "428 PRECONDITION_REQUIRED",
                      "429 TOO_MANY_REQUESTS",
                      "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                      "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                      "500 INTERNAL_SERVER_ERROR",
                      "501 NOT_IMPLEMENTED",
                      "502 BAD_GATEWAY",
                      "503 SERVICE_UNAVAILABLE",
                      "504 GATEWAY_TIMEOUT",
                      "505 HTTP_VERSION_NOT_SUPPORTED",
                      "506 VARIANT_ALSO_NEGOTIATES",
                      "507 INSUFFICIENT_STORAGE",
                      "508 LOOP_DETECTED",
                      "509 BANDWIDTH_LIMIT_EXCEEDED",
                      "510 NOT_EXTENDED",
                      "511 NETWORK_AUTHENTICATION_REQUIRED"
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/persons/saveAll": {
      "post": {
        "tags": [
          "Person API"
        ],
        "summary": "Добавить в базу данные списка пользователей",
        "description": "Позволяет добавить в базу данные списка пользователей на основе PersonCreateInputDto",
        "operationId": "saveAllPersons",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonCreateInputDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/persons/{id}": {
      "get": {
        "tags": [
          "Person API"
        ],
        "summary": "Получить пользователя по его id в базе данных",
        "description": "Позволяет получить пользователя по его уникальному идентификатору",
        "operationId": "findPersonById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/persons/passportNumber/{passportNumber}": {
      "get": {
        "tags": [
          "Person API"
        ],
        "summary": "Получить пользователя по номеру его паспорта в базе данных",
        "description": "Позволяет получить пользователя по номеру его паспорта",
        "operationId": "findPersonByPassportNumber",
        "parameters": [
          {
            "name": "passportNumber",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^[0-9]{10}$",
              "type": "string"
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/persons/checkByValidPersonData": {
      "get": {
        "tags": [
          "Person API"
        ],
        "summary": "Проверить, есть ли в базе пользователь с определенным паспортом и ФИО",
        "description": "Позволяет проверить базу на наличие определенного пользователя",
        "operationId": "checkByValidPersonData",
        "parameters": [
          {
            "name": "firstName",
            "in": "query",
            "description": "Фамилия",
            "required": true,
            "schema": {
              "maxLength": 30,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Имя",
            "required": true,
            "schema": {
              "maxLength": 30,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "patronymic",
            "in": "query",
            "description": "Отчество",
            "required": false,
            "schema": {
              "maxLength": 30,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "passportNumber",
            "in": "query",
            "description": "Серия и номер документа 10 цифр без пробела",
            "required": true,
            "schema": {
              "pattern": "^[0-9]{10}$",
              "type": "string"
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/documents/{id}": {
      "get": {
        "tags": [
          "Document API"
        ],
        "summary": "Получить документ по его id в базе данных",
        "description": "Позволяет получить документ по его уникальному идентификатору",
        "operationId": "findDocumentById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/documents/personsId": {
      "get": {
        "tags": [
          "Document API"
        ],
        "summary": "Получить список документов для определенных id пользователей",
        "description": "Позволяет получить список документов по списку уникальных интентификаторов пользователей",
        "operationId": "findDocumentsByPersonsId",
        "parameters": [
          {
            "name": "personsId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DocumentDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contacts/{id}": {
      "get": {
        "tags": [
          "Contact API"
        ],
        "summary": "Получить контакт по его id в базе данных",
        "description": "Позволяет получить контакт по его уникальному идентификатору",
        "operationId": "findContactById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contacts/personsId": {
      "get": {
        "tags": [
          "Contact API"
        ],
        "summary": "Получить список контактов для определенных id пользователей",
        "description": "Позволяет получить список контактов по списку уникальных интентификаторов пользователей",
        "operationId": "findContactsByPersonsId",
        "parameters": [
          {
            "name": "personsId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ContactDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/addresses/{id}": {
      "get": {
        "tags": [
          "Address API"
        ],
        "summary": "Получить адрес по его id в базе данных",
        "description": "Позволяет получить адрес по его уникальному идентификатору",
        "operationId": "findAddressById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AddressDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/addresses/byPersonsId": {
      "get": {
        "tags": [
          "Address API"
        ],
        "summary": "Получить все адреса",
        "description": "Позволяет получить все адреса конкретных пользователей в зависимости от указанного уровня видимости",
        "operationId": "findAllAddressesByPersonsId",
        "parameters": [
          {
            "name": "visibility",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "personsId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AddressDto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/persons/personsId": {
      "delete": {
        "tags": [
          "Person API"
        ],
        "summary": "Удалить список пользователей",
        "description": "Позволяет удалить пользователей из базы по их id",
        "operationId": "deleteAllById_1",
        "parameters": [
          {
            "name": "personsId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "100 CONTINUE",
                      "101 SWITCHING_PROTOCOLS",
                      "102 PROCESSING",
                      "103 CHECKPOINT",
                      "200 OK",
                      "201 CREATED",
                      "202 ACCEPTED",
                      "203 NON_AUTHORITATIVE_INFORMATION",
                      "204 NO_CONTENT",
                      "205 RESET_CONTENT",
                      "206 PARTIAL_CONTENT",
                      "207 MULTI_STATUS",
                      "208 ALREADY_REPORTED",
                      "226 IM_USED",
                      "300 MULTIPLE_CHOICES",
                      "301 MOVED_PERMANENTLY",
                      "302 FOUND",
                      "302 MOVED_TEMPORARILY",
                      "303 SEE_OTHER",
                      "304 NOT_MODIFIED",
                      "305 USE_PROXY",
                      "307 TEMPORARY_REDIRECT",
                      "308 PERMANENT_REDIRECT",
                      "400 BAD_REQUEST",
                      "401 UNAUTHORIZED",
                      "402 PAYMENT_REQUIRED",
                      "403 FORBIDDEN",
                      "404 NOT_FOUND",
                      "405 METHOD_NOT_ALLOWED",
                      "406 NOT_ACCEPTABLE",
                      "407 PROXY_AUTHENTICATION_REQUIRED",
                      "408 REQUEST_TIMEOUT",
                      "409 CONFLICT",
                      "410 GONE",
                      "411 LENGTH_REQUIRED",
                      "412 PRECONDITION_FAILED",
                      "413 PAYLOAD_TOO_LARGE",
                      "413 REQUEST_ENTITY_TOO_LARGE",
                      "414 URI_TOO_LONG",
                      "414 REQUEST_URI_TOO_LONG",
                      "415 UNSUPPORTED_MEDIA_TYPE",
                      "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                      "417 EXPECTATION_FAILED",
                      "418 I_AM_A_TEAPOT",
                      "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                      "420 METHOD_FAILURE",
                      "421 DESTINATION_LOCKED",
                      "422 UNPROCESSABLE_ENTITY",
                      "423 LOCKED",
                      "424 FAILED_DEPENDENCY",
                      "425 TOO_EARLY",
                      "426 UPGRADE_REQUIRED",
                      "428 PRECONDITION_REQUIRED",
                      "429 TOO_MANY_REQUESTS",
                      "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                      "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                      "500 INTERNAL_SERVER_ERROR",
                      "501 NOT_IMPLEMENTED",
                      "502 BAD_GATEWAY",
                      "503 SERVICE_UNAVAILABLE",
                      "504 GATEWAY_TIMEOUT",
                      "505 HTTP_VERSION_NOT_SUPPORTED",
                      "506 VARIANT_ALSO_NEGOTIATES",
                      "507 INSUFFICIENT_STORAGE",
                      "508 LOOP_DETECTED",
                      "509 BANDWIDTH_LIMIT_EXCEEDED",
                      "510 NOT_EXTENDED",
                      "511 NETWORK_AUTHENTICATION_REQUIRED"
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/documents/documentsId": {
      "delete": {
        "tags": [
          "Document API"
        ],
        "summary": "Удалить список документов",
        "description": "Позволяет удалить документы из базы по их id",
        "operationId": "deleteDocumentsById",
        "parameters": [
          {
            "name": "documentsId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "100 CONTINUE",
                      "101 SWITCHING_PROTOCOLS",
                      "102 PROCESSING",
                      "103 CHECKPOINT",
                      "200 OK",
                      "201 CREATED",
                      "202 ACCEPTED",
                      "203 NON_AUTHORITATIVE_INFORMATION",
                      "204 NO_CONTENT",
                      "205 RESET_CONTENT",
                      "206 PARTIAL_CONTENT",
                      "207 MULTI_STATUS",
                      "208 ALREADY_REPORTED",
                      "226 IM_USED",
                      "300 MULTIPLE_CHOICES",
                      "301 MOVED_PERMANENTLY",
                      "302 FOUND",
                      "302 MOVED_TEMPORARILY",
                      "303 SEE_OTHER",
                      "304 NOT_MODIFIED",
                      "305 USE_PROXY",
                      "307 TEMPORARY_REDIRECT",
                      "308 PERMANENT_REDIRECT",
                      "400 BAD_REQUEST",
                      "401 UNAUTHORIZED",
                      "402 PAYMENT_REQUIRED",
                      "403 FORBIDDEN",
                      "404 NOT_FOUND",
                      "405 METHOD_NOT_ALLOWED",
                      "406 NOT_ACCEPTABLE",
                      "407 PROXY_AUTHENTICATION_REQUIRED",
                      "408 REQUEST_TIMEOUT",
                      "409 CONFLICT",
                      "410 GONE",
                      "411 LENGTH_REQUIRED",
                      "412 PRECONDITION_FAILED",
                      "413 PAYLOAD_TOO_LARGE",
                      "413 REQUEST_ENTITY_TOO_LARGE",
                      "414 URI_TOO_LONG",
                      "414 REQUEST_URI_TOO_LONG",
                      "415 UNSUPPORTED_MEDIA_TYPE",
                      "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                      "417 EXPECTATION_FAILED",
                      "418 I_AM_A_TEAPOT",
                      "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                      "420 METHOD_FAILURE",
                      "421 DESTINATION_LOCKED",
                      "422 UNPROCESSABLE_ENTITY",
                      "423 LOCKED",
                      "424 FAILED_DEPENDENCY",
                      "425 TOO_EARLY",
                      "426 UPGRADE_REQUIRED",
                      "428 PRECONDITION_REQUIRED",
                      "429 TOO_MANY_REQUESTS",
                      "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                      "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                      "500 INTERNAL_SERVER_ERROR",
                      "501 NOT_IMPLEMENTED",
                      "502 BAD_GATEWAY",
                      "503 SERVICE_UNAVAILABLE",
                      "504 GATEWAY_TIMEOUT",
                      "505 HTTP_VERSION_NOT_SUPPORTED",
                      "506 VARIANT_ALSO_NEGOTIATES",
                      "507 INSUFFICIENT_STORAGE",
                      "508 LOOP_DETECTED",
                      "509 BANDWIDTH_LIMIT_EXCEEDED",
                      "510 NOT_EXTENDED",
                      "511 NETWORK_AUTHENTICATION_REQUIRED"
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contacts/contactsId": {
      "delete": {
        "tags": [
          "Contact API"
        ],
        "summary": "Удалить список контактов",
        "description": "Позволяет удалить контакты из базы по их id",
        "operationId": "deleteContactsById",
        "parameters": [
          {
            "name": "contactsId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "100 CONTINUE",
                      "101 SWITCHING_PROTOCOLS",
                      "102 PROCESSING",
                      "103 CHECKPOINT",
                      "200 OK",
                      "201 CREATED",
                      "202 ACCEPTED",
                      "203 NON_AUTHORITATIVE_INFORMATION",
                      "204 NO_CONTENT",
                      "205 RESET_CONTENT",
                      "206 PARTIAL_CONTENT",
                      "207 MULTI_STATUS",
                      "208 ALREADY_REPORTED",
                      "226 IM_USED",
                      "300 MULTIPLE_CHOICES",
                      "301 MOVED_PERMANENTLY",
                      "302 FOUND",
                      "302 MOVED_TEMPORARILY",
                      "303 SEE_OTHER",
                      "304 NOT_MODIFIED",
                      "305 USE_PROXY",
                      "307 TEMPORARY_REDIRECT",
                      "308 PERMANENT_REDIRECT",
                      "400 BAD_REQUEST",
                      "401 UNAUTHORIZED",
                      "402 PAYMENT_REQUIRED",
                      "403 FORBIDDEN",
                      "404 NOT_FOUND",
                      "405 METHOD_NOT_ALLOWED",
                      "406 NOT_ACCEPTABLE",
                      "407 PROXY_AUTHENTICATION_REQUIRED",
                      "408 REQUEST_TIMEOUT",
                      "409 CONFLICT",
                      "410 GONE",
                      "411 LENGTH_REQUIRED",
                      "412 PRECONDITION_FAILED",
                      "413 PAYLOAD_TOO_LARGE",
                      "413 REQUEST_ENTITY_TOO_LARGE",
                      "414 URI_TOO_LONG",
                      "414 REQUEST_URI_TOO_LONG",
                      "415 UNSUPPORTED_MEDIA_TYPE",
                      "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                      "417 EXPECTATION_FAILED",
                      "418 I_AM_A_TEAPOT",
                      "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                      "420 METHOD_FAILURE",
                      "421 DESTINATION_LOCKED",
                      "422 UNPROCESSABLE_ENTITY",
                      "423 LOCKED",
                      "424 FAILED_DEPENDENCY",
                      "425 TOO_EARLY",
                      "426 UPGRADE_REQUIRED",
                      "428 PRECONDITION_REQUIRED",
                      "429 TOO_MANY_REQUESTS",
                      "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                      "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                      "500 INTERNAL_SERVER_ERROR",
                      "501 NOT_IMPLEMENTED",
                      "502 BAD_GATEWAY",
                      "503 SERVICE_UNAVAILABLE",
                      "504 GATEWAY_TIMEOUT",
                      "505 HTTP_VERSION_NOT_SUPPORTED",
                      "506 VARIANT_ALSO_NEGOTIATES",
                      "507 INSUFFICIENT_STORAGE",
                      "508 LOOP_DETECTED",
                      "509 BANDWIDTH_LIMIT_EXCEEDED",
                      "510 NOT_EXTENDED",
                      "511 NETWORK_AUTHENTICATION_REQUIRED"
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/addresses/addressesId": {
      "delete": {
        "tags": [
          "Address API"
        ],
        "summary": "Удалить список адресов",
        "description": "Позволяет удалить список адресов из базы по их id",
        "operationId": "deleteDocumentsById_1",
        "parameters": [
          {
            "name": "addressesId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "100 CONTINUE",
                      "101 SWITCHING_PROTOCOLS",
                      "102 PROCESSING",
                      "103 CHECKPOINT",
                      "200 OK",
                      "201 CREATED",
                      "202 ACCEPTED",
                      "203 NON_AUTHORITATIVE_INFORMATION",
                      "204 NO_CONTENT",
                      "205 RESET_CONTENT",
                      "206 PARTIAL_CONTENT",
                      "207 MULTI_STATUS",
                      "208 ALREADY_REPORTED",
                      "226 IM_USED",
                      "300 MULTIPLE_CHOICES",
                      "301 MOVED_PERMANENTLY",
                      "302 FOUND",
                      "302 MOVED_TEMPORARILY",
                      "303 SEE_OTHER",
                      "304 NOT_MODIFIED",
                      "305 USE_PROXY",
                      "307 TEMPORARY_REDIRECT",
                      "308 PERMANENT_REDIRECT",
                      "400 BAD_REQUEST",
                      "401 UNAUTHORIZED",
                      "402 PAYMENT_REQUIRED",
                      "403 FORBIDDEN",
                      "404 NOT_FOUND",
                      "405 METHOD_NOT_ALLOWED",
                      "406 NOT_ACCEPTABLE",
                      "407 PROXY_AUTHENTICATION_REQUIRED",
                      "408 REQUEST_TIMEOUT",
                      "409 CONFLICT",
                      "410 GONE",
                      "411 LENGTH_REQUIRED",
                      "412 PRECONDITION_FAILED",
                      "413 PAYLOAD_TOO_LARGE",
                      "413 REQUEST_ENTITY_TOO_LARGE",
                      "414 URI_TOO_LONG",
                      "414 REQUEST_URI_TOO_LONG",
                      "415 UNSUPPORTED_MEDIA_TYPE",
                      "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                      "417 EXPECTATION_FAILED",
                      "418 I_AM_A_TEAPOT",
                      "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                      "420 METHOD_FAILURE",
                      "421 DESTINATION_LOCKED",
                      "422 UNPROCESSABLE_ENTITY",
                      "423 LOCKED",
                      "424 FAILED_DEPENDENCY",
                      "425 TOO_EARLY",
                      "426 UPGRADE_REQUIRED",
                      "428 PRECONDITION_REQUIRED",
                      "429 TOO_MANY_REQUESTS",
                      "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                      "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                      "500 INTERNAL_SERVER_ERROR",
                      "501 NOT_IMPLEMENTED",
                      "502 BAD_GATEWAY",
                      "503 SERVICE_UNAVAILABLE",
                      "504 GATEWAY_TIMEOUT",
                      "505 HTTP_VERSION_NOT_SUPPORTED",
                      "506 VARIANT_ALSO_NEGOTIATES",
                      "507 INSUFFICIENT_STORAGE",
                      "508 LOOP_DETECTED",
                      "509 BANDWIDTH_LIMIT_EXCEEDED",
                      "510 NOT_EXTENDED",
                      "511 NETWORK_AUTHENTICATION_REQUIRED"
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddressDto": {
        "required": [
          "city",
          "country",
          "home",
          "id",
          "region",
          "street",
          "type"
        ],
        "type": "object",
        "properties": {
          "visibility": {
            "type": "boolean",
            "description": "Видимость сущности для конечного пользователя",
            "default": true
          },
          "version": {
            "type": "integer",
            "description": "Параметр версионирования сущности",
            "format": "int32"
          },
          "lastModifiedDate": {
            "type": "string",
            "description": "Дата последнего изменения сущности"
          },
          "dateTimeCreation": {
            "type": "string",
            "description": "Дата создания сущности"
          },
          "id": {
            "type": "integer",
            "description": "Идентификатор",
            "format": "int64",
            "example": 1
          },
          "type": {
            "type": "string",
            "description": "Тип адреса: регистрация или временный",
            "example": "REGISTRATION",
            "enum": [
              "REGISTRATION",
              "TEMPORARY"
            ]
          },
          "country": {
            "type": "string",
            "description": "Страна проживания/регистрации",
            "example": "Russia"
          },
          "region": {
            "type": "string",
            "description": "Регион проживания/регистрации",
            "example": "Республика Башкортостан"
          },
          "city": {
            "type": "string",
            "description": "Город проживания/регистрации",
            "example": "Стерлитамак"
          },
          "street": {
            "type": "string",
            "description": "Улица проживания/регистрация",
            "example": "Гоголя"
          },
          "home": {
            "type": "integer",
            "description": "Дом проживания/регситрации",
            "format": "int64",
            "example": 106
          },
          "flat": {
            "type": "integer",
            "description": "Квартира проживания/регистрации",
            "format": "int64",
            "example": 1
          }
        }
      },
      "ContactDto": {
        "required": [
          "id",
          "phoneNumber",
          "type"
        ],
        "type": "object",
        "properties": {
          "visibility": {
            "type": "boolean",
            "description": "Видимость сущности для конечного пользователя",
            "default": true
          },
          "version": {
            "type": "integer",
            "description": "Параметр версионирования сущности",
            "format": "int32"
          },
          "lastModifiedDate": {
            "type": "string",
            "description": "Дата последнего изменения сущности"
          },
          "dateTimeCreation": {
            "type": "string",
            "description": "Дата создания сущности"
          },
          "id": {
            "type": "integer",
            "description": "Идентификатор",
            "format": "int64",
            "example": 1
          },
          "type": {
            "type": "string",
            "description": "Тип контакта: мобильный, домашний",
            "example": "HOME",
            "enum": [
              "HOME",
              "MOBILE"
            ]
          },
          "phoneNumber": {
            "pattern": "^[+][0-9]{11}$",
            "type": "string",
            "description": "Номер телефона",
            "example": "+79999999999"
          }
        }
      },
      "DocumentDto": {
        "required": [
          "id",
          "number",
          "type"
        ],
        "type": "object",
        "properties": {
          "visibility": {
            "type": "boolean",
            "description": "Видимость сущности для конечного пользователя",
            "default": true
          },
          "version": {
            "type": "integer",
            "description": "Параметр версионирования сущности",
            "format": "int32"
          },
          "lastModifiedDate": {
            "type": "string",
            "description": "Дата последнего изменения сущности"
          },
          "dateTimeCreation": {
            "type": "string",
            "description": "Дата создания сущности"
          },
          "id": {
            "type": "integer",
            "description": "Идентификатор",
            "format": "int64",
            "example": 1
          },
          "type": {
            "type": "string",
            "description": "Тип документа: паспорт, снилс",
            "example": "PASSPORT",
            "enum": [
              "SNILS",
              "PASSPORT"
            ]
          },
          "number": {
            "pattern": "^[0-9]{10}$",
            "type": "string",
            "description": "Серия и номер документа без пробела",
            "example": "4515001002"
          }
        }
      },
      "PersonDto": {
        "required": [
          "firstName",
          "id",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "visibility": {
            "type": "boolean",
            "description": "Видимость сущности для конечного пользователя",
            "default": true
          },
          "version": {
            "type": "integer",
            "description": "Параметр версионирования сущности",
            "format": "int32"
          },
          "lastModifiedDate": {
            "type": "string",
            "description": "Дата последнего изменения сущности"
          },
          "dateTimeCreation": {
            "type": "string",
            "description": "Дата создания сущности"
          },
          "id": {
            "type": "integer",
            "description": "Идентификатор",
            "format": "int64",
            "example": 1
          },
          "lastName": {
            "type": "string",
            "description": "Фамилия пользователя",
            "example": "Федоров"
          },
          "firstName": {
            "type": "string",
            "description": "Имя пользователя",
            "example": "Федор"
          },
          "patronymic": {
            "type": "string",
            "description": "Отчество пользователя",
            "example": "Федорович"
          },
          "documents": {
            "uniqueItems": true,
            "type": "array",
            "description": "Список документов, принадлежащих пользователю",
            "items": {
              "$ref": "#/components/schemas/DocumentDto"
            }
          },
          "addresses": {
            "uniqueItems": true,
            "type": "array",
            "description": "Список адресов, где зарегистрирован/проживает пользователь",
            "items": {
              "$ref": "#/components/schemas/AddressDto"
            }
          },
          "contacts": {
            "uniqueItems": true,
            "type": "array",
            "description": "Список контактов, принадлежащих пользователю",
            "items": {
              "$ref": "#/components/schemas/ContactDto"
            }
          }
        }
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Статус",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "Системное сообщение ошибки"
          },
          "error": {
            "type": "string",
            "description": "Ошибка"
          },
          "timestamp": {
            "type": "string",
            "description": "Время, когда произошла ошибка",
            "format": "date-time"
          },
          "rawMessage": {
            "type": "string",
            "description": "Сообщение исключеня java"
          }
        },
        "description": "Ошибка обработки запроса"
      },
      "AddressCreateInputDto": {
        "required": [
          "city",
          "country",
          "home",
          "region",
          "street",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Тип адреса: регистрация или временный",
            "example": "REGISTRATION"
          },
          "country": {
            "type": "string",
            "description": "Страна проживания/регистрации",
            "example": "Russia"
          },
          "region": {
            "type": "string",
            "description": "Регион проживания/регистрации",
            "example": "Республика Башкортостан"
          },
          "city": {
            "type": "string",
            "description": "Город проживания/регистрации",
            "example": "Стерлитамак"
          },
          "street": {
            "type": "string",
            "description": "Улица проживания/регистрация",
            "example": "Гоголя"
          },
          "home": {
            "type": "integer",
            "description": "Дом проживания/регситрации",
            "format": "int64",
            "example": 106
          },
          "flat": {
            "minimum": 1,
            "type": "integer",
            "description": "Квартира проживания/регистрации",
            "format": "int64",
            "nullable": true,
            "example": 1
          }
        },
        "description": "Список адресов, где зарегистрирован/проживает пользователь"
      },
      "ContactCreateInputDto": {
        "required": [
          "phoneNumber",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Тип контакта: мобильный, домашний",
            "example": "HOME"
          },
          "phoneNumber": {
            "pattern": "^[+][0-9]{11}$",
            "type": "string",
            "description": "Номер телефона",
            "example": "+79999999999"
          }
        },
        "description": "Список контактов, принадлежащих пользователю"
      },
      "DocumentCreateInputDto": {
        "required": [
          "number",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Тип документа: паспорт, снилс",
            "example": "PASSPORT"
          },
          "number": {
            "pattern": "^[0-9]{10}$",
            "type": "string",
            "description": "Серия и номер документа без пробела",
            "example": "4515001002"
          }
        },
        "description": "Список документов, принадлежащих пользователю"
      },
      "PersonCreateInputDto": {
        "required": [
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "lastName": {
            "type": "string",
            "description": "Фамилия пользователя",
            "example": "Федоров"
          },
          "firstName": {
            "type": "string",
            "description": "Имя пользователя",
            "example": "Федор"
          },
          "patronymic": {
            "type": "string",
            "description": "Отчество пользователя",
            "example": "Федорович"
          },
          "documents": {
            "uniqueItems": true,
            "type": "array",
            "description": "Список документов, принадлежащих пользователю",
            "items": {
              "$ref": "#/components/schemas/DocumentCreateInputDto"
            }
          },
          "addresses": {
            "uniqueItems": true,
            "type": "array",
            "description": "Список адресов, где зарегистрирован/проживает пользователь",
            "items": {
              "$ref": "#/components/schemas/AddressCreateInputDto"
            }
          },
          "contacts": {
            "uniqueItems": true,
            "type": "array",
            "description": "Список контактов, принадлежащих пользователю",
            "items": {
              "$ref": "#/components/schemas/ContactCreateInputDto"
            }
          }
        }
      }
    }
  }
}